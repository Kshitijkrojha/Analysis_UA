# dashboard.py (Final Version with Self-Contained Flowchart)
import streamlit as st
import pandas as pd
import os

# --- Page Configuration ---
st.set_page_config(
    page_title="United Airlines Flight Difficulty Dashboard",
    page_icon="✈️",
    layout="wide"
)

# --- Data Loading ---
@st.cache_data
def load_data(filepath):
    """Loads the final analysis data, converting dates for proper filtering."""
    try:
        df = pd.read_csv(filepath)
        df['scheduled_departure_date_local'] = pd.to_datetime(df['scheduled_departure_date_local']).dt.date
        return df
    except FileNotFoundError:
        return None

# Load the data generated by your main pipeline
DATA_FILE = os.path.join('output', 'test_TeamSamurai.csv')
df_full = load_data(DATA_FILE)

if df_full is None:
    st.error(f"FATAL ERROR: The data file was not found at '{DATA_FILE}'.")
    st.info("Please run your main.py script to generate the final output file before starting the dashboard.")
else:
    # --- Dashboard Title ---
    st.title("✈️ Proactive Operations: A Flight Difficulty Dashboard")
    st.markdown("This tool provides a data-driven framework for identifying and understanding operational complexity at ORD.")

    # --- Create Tabs for Each Section of the Story ---
    tab1, tab2, tab3, tab4 = st.tabs([
        "**Daily Operations Briefing** (What)", 
        "**Flight Deconstructor** (Why)", 
        "**Our Methodology** (How)", 
        "**Strategic Insights** (So What?)"
    ])

    # ==============================================================================
    # TAB 1: Daily Operations Briefing (The "What")
    # ==============================================================================
    with tab1:
        st.header("Daily Priority Flight List")
        
        unique_dates = sorted(df_full['scheduled_departure_date_local'].unique())
        selected_date = st.selectbox(
            'Select Departure Date:',
            options=unique_dates,
            index=len(unique_dates)-1,
            format_func=lambda date: date.strftime('%Y-%m-%d')
        )
        
        daily_df = df_full[df_full['scheduled_departure_date_local'] == selected_date].copy()
        
        if not daily_df.empty:
            st.markdown(f"Displaying **{len(daily_df)}** flights for **{selected_date.strftime('%A, %B %d, %Y')}**.")
            
            total_difficult = (daily_df['difficulty_class'] == 'Difficult').sum()
            avg_score = daily_df['difficulty_score'].mean()
            if 'departure_hour' in daily_df.columns:
                busiest_hour = daily_df.loc[daily_df['difficulty_score'].idxmax()]['departure_hour']
            else:
                busiest_hour = "N/A"

            c1, c2, c3 = st.columns(3)
            c1.metric("🔴 High-Difficulty Flights", f"{total_difficult}")
            c2.metric("Avg. Difficulty Score", f"{avg_score:.1f}")
            c3.metric("Busiest Hour (by Difficulty)", f"{int(busiest_hour)}:00" if busiest_hour != "N/A" else "N/A")

            st.dataframe(daily_df[[
                'difficulty_rank_daily', 'flight_number', 'scheduled_arrival_station_code', 'difficulty_score',
                'difficulty_class', 'load_factor', 'ground_time_deficit', 'ssr_count'
            ]].rename(columns={'scheduled_arrival_station_code': 'Dest', 'difficulty_rank_daily': 'Rank'}).sort_values('Rank'))
        else:
            st.warning("No flight data available for the selected date.")

    # ==============================================================================
    # TAB 2: Flight Deconstructor (The "Why")
    # ==============================================================================
    with tab2:
        st.header("Deconstructing Flight Difficulty")
        st.markdown("Select a specific flight to understand what makes it difficult.")

        if not daily_df.empty:
            flight_to_inspect = st.selectbox(
                'Select a Flight Number from the chosen date:',
                options=daily_df.sort_values('difficulty_rank_daily')['flight_number'].unique()
            )
            
            if flight_to_inspect:
                flight_data = daily_df[daily_df['flight_number'] == flight_to_inspect].iloc[0]
                
                st.subheader(f"Difficulty Profile for UA{flight_to_inspect} to {flight_data['scheduled_arrival_station_code']}")
                st.write("Each factor below is ranked on a scale of 0 (easiest) to 1 (most difficult) compared to other flights *on the same day*.")

                rank_cols = {
                    'Passenger Load': 'load_factor_rank', 'Special Service Needs': 'ssr_per_pax_rank',
                    'Child Passengers': 'child_ratio_rank', 'Basic Economy Pax': 'basic_economy_ratio_rank',
                    'Baggage per Passenger': 'bags_per_pax_rank', 'International Flight': 'is_international_rank',
                    'Tight Ground Time': 'ground_time_deficit_rank', 'Aircraft Complexity': 'fleet_complexity_score_rank',
                    'Peak Hour Pressure': 'time_pressure_score_rank', 'High-Risk Bag Transfer': 'is_high_risk_transfer_rank'
                }
                
                chart_data = pd.DataFrame({
                    'Factor': rank_cols.keys(),
                    'Difficulty Contribution (0-1)': [flight_data.get(col, 0) for col in rank_cols.values()]
                }).sort_values('Difficulty Contribution (0-1)', ascending=False)
                
                st.bar_chart(chart_data, x='Factor', y='Difficulty Contribution (0-1)')

                with st.expander("What do these factors mean?"):
                    st.markdown("""
                    - **Tight Ground Time:** A high score means this flight has significantly less ground time than the minimum required.
                    - **Special Service Needs:** A high score indicates a large number of special requests relative to the number of passengers.
                    - **Aircraft Complexity:** A high score means the flight uses a large, wide-body aircraft.
                    - **Peak Hour Pressure:** A high score means the flight departs during the busiest rush hours.
                    """)
        else:
            st.info("Please select a date with available flight data in the 'Daily Operations Briefing' tab.")

    # ==============================================================================
    # TAB 3: Our Methodology (The "How")
    # ==============================================================================
    with tab3:
        st.header("How the Flight Difficulty Score is Calculated")
        st.markdown("The score is designed to be transparent, data-driven, and operationally relevant. It is calculated fresh every day, ensuring it reflects the unique challenges of that day's schedule.")
        
        st.subheader("The Process")
        
        # --- NEW CODE: Replaces the broken st.image link ---
        flowchart = """
        digraph {
            node [shape=box, style="rounded,filled", fillcolor="#f0f2f6", fontname="sans-serif"]
            edge [fontname="sans-serif"]

            Data [label="Raw Data Sources\n(Flight, PNR, Bags, etc.)"]
            Merge [label="1. Data Consolidation\n(Create Single Flight View)"]
            Features [label="2. Feature Engineering\n(Basic & Advanced Features)"]
            Score [label="3. Daily Scoring Engine\n(Calculate Percentile Ranks)"]
            Output [label="Actionable Insights\n(Dashboard & Recommendations)", fillcolor="#ffede0"]

            Data -> Merge -> Features -> Score -> Output
        }
        """
        st.graphviz_chart(flowchart, use_container_width=True)
        # --- END OF NEW CODE ---

        st.subheader("Key Feature Distributions (Full Dataset)")
        c1, c2 = st.columns(2)
        with c1:
            st.markdown("**Passenger Load Factor**")
            st.line_chart(df_full['load_factor'].value_counts().sort_index())
        with c2:
            st.markdown("**Ground Time Deficit (Minutes)**")
            st.bar_chart(df_full['ground_time_deficit'].value_counts().sort_index())
            
        with st.expander("See a detailed explanation of the scoring logic"):
            st.markdown("""
            1.  **Data Consolidation:** We merge five distinct datasets into a single, unified view for each unique flight.
            2.  **Feature Engineering:** We create over 10 features that act as proxies for operational complexity.
            3.  **Daily Percentile Rank:** For each feature, we rank every flight *only against other flights on the same day*.
            4.  **Final Score Aggregation:** The final Difficulty Score is the simple average of all the daily percentile ranks, scaled from 0 to 100.
            """)
            
    # ==============================================================================
    # TAB 4: Strategic Insights (The "So What?")
    # ==============================================================================
    with tab4:
        st.header("Long-Term Patterns and Strategic Recommendations")
        
        st.subheader("Overall Destination Hotspots (2-Week Period)")
        dest_summary_overall = df_full.groupby('scheduled_arrival_station_code')['difficulty_score'].mean().sort_values(ascending=False).head(15)
        st.bar_chart(dest_summary_overall)
        
        st.subheader("Actionable Recommendations")
        st.markdown("""
        **1. For High Passenger Service Destinations (e.g., MCO, LAS):**
        - **Insight:** These flights are difficult due to high numbers of children and special service requests. The bottleneck is at the gate.
        - **Recommendation:** Proactively assign a **Special Assistance Coordinator** to these flights to manage complex pre-boarding.

        **2. For Operationally Complex Hubs (e.g., EWR, LHR, SFO):**
        - **Insight:** These flights are difficult due to tight ground times, high-risk baggage transfers, and large aircraft.
        - **Recommendation:** Flag flights with a `is_high_risk_transfer` score of 1. This should trigger an automatic alert to **pre-stage baggage crews** at the arrival gate.

        **3. For Peak Hour Management:**
        - **Insight:** The morning (7-9 AM) and evening (4-7 PM) rush hours have the highest concentration of 'Difficult' flights.
        - **Recommendation:** During these critical windows, position an **Operations Duty Manager** centrally with this dashboard to dynamically allocate staff to the highest-scoring flights.
        """)